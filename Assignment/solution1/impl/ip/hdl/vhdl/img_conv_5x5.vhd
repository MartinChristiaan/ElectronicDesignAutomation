-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_conv_5x5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inptr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inptr_ce0 : OUT STD_LOGIC;
    inptr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    inptr_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inptr_ce1 : OUT STD_LOGIC;
    inptr_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    outptr_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    outptr_ce0 : OUT STD_LOGIC;
    outptr_we0 : OUT STD_LOGIC;
    outptr_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mask_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    mask_ce0 : OUT STD_LOGIC;
    mask_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mask_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    mask_ce1 : OUT STD_LOGIC;
    mask_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    shift : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of img_conv_5x5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "img_conv_5x5,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7z030fbv484-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.000000,HLS_SYN_LAT=1948,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=210,HLS_SYN_LUT=589,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_221 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_225 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN5_0_rec_cast1_fu_229_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal IN5_0_rec_cast1_reg_563 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IN5_0_rec_cast2_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN5_0_rec_cast2_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN5_0_rec_cast17_cas_fu_237_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal IN5_0_rec_cast17_cas_reg_573 : STD_LOGIC_VECTOR (6 downto 0);
    signal outptr_addr_reg_578 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_rec_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_rec_reg_586 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast1_fu_258_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast1_reg_591 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_cast_fu_262_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_597 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_272_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_606 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum3_fu_306_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum3_reg_616 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum5_fu_319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum5_reg_622 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum9_fu_332_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum9_reg_627 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_642 : STD_LOGIC_VECTOR (7 downto 0);
    signal inptr_load_1_reg_667 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal inptr_load_2_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_load_1_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_load_2_reg_692 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum33_fu_478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum33_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_533_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_reg_712 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_541_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp8_reg_717 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_2_fu_520_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal IN5_0_rec_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sum_reg_198 : STD_LOGIC_VECTOR (20 downto 0);
    signal exitcond2_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_210 : STD_LOGIC_VECTOR (2 downto 0);
    signal IN5_0_rec_cast_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_283_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum1_fu_287_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_298_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_cast_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_346_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_s_fu_358_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_fu_366_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_394_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum7_cast1_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_436_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum00_fu_454_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum00_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum00_fu_454_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum33_fu_478_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum33_fu_478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_549_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp8_cast_fu_507_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp7_cast_fu_504_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_12_fu_510_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast_fu_516_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_541_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_533_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_541_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_549_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum00_fu_454_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum33_fu_478_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component img_conv_5x5_mac_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component img_conv_5x5_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    img_conv_5x5_mac_bkb_U1 : component img_conv_5x5_mac_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_533_p0,
        din1 => mask_load_1_reg_687,
        din2 => sum00_fu_454_p2,
        dout => grp_fu_533_p3);

    img_conv_5x5_mac_cud_U2 : component img_conv_5x5_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_541_p0,
        din1 => mask_load_2_reg_692,
        din2 => grp_fu_549_p3,
        dout => grp_fu_541_p3);

    img_conv_5x5_mac_bkb_U3 : component img_conv_5x5_mac_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_549_p0,
        din1 => reg_225,
        din2 => sum33_reg_707,
        dout => grp_fu_549_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    IN5_0_rec_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                IN5_0_rec_reg_186 <= p_rec_reg_586;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                IN5_0_rec_reg_186 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_246_p2 = ap_const_lv1_0))) then 
                i_reg_210 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_210 <= i_1_reg_606;
            end if; 
        end if;
    end process;

    sum_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_246_p2 = ap_const_lv1_0))) then 
                sum_reg_198 <= ap_const_lv21_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_reg_198 <= sum_2_fu_520_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    IN5_0_rec_cast17_cas_reg_573(5 downto 0) <= IN5_0_rec_cast17_cas_fu_237_p1(5 downto 0);
                    IN5_0_rec_cast1_reg_563(5 downto 0) <= IN5_0_rec_cast1_fu_229_p1(5 downto 0);
                    IN5_0_rec_cast2_reg_568(5 downto 0) <= IN5_0_rec_cast2_fu_233_p1(5 downto 0);
                outptr_addr_reg_578 <= IN5_0_rec_cast_fu_241_p1(6 - 1 downto 0);
                p_rec_reg_586 <= p_rec_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_606 <= i_1_fu_272_p2;
                    i_cast1_reg_591(2 downto 0) <= i_cast1_fu_258_p1(2 downto 0);
                    i_cast_reg_597(2 downto 0) <= i_cast_fu_262_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_266_p2 = ap_const_lv1_1))) then
                icmp_reg_637 <= icmp_fu_376_p2;
                tmp_13_reg_642 <= tmp_13_fu_382_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                inptr_load_1_reg_667 <= inptr_q0;
                inptr_load_2_reg_672 <= inptr_q1;
                mask_load_1_reg_687 <= mask_q0;
                mask_load_2_reg_692 <= mask_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_221 <= inptr_q0;
                reg_225 <= mask_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sum33_reg_707 <= sum33_fu_478_p2;
                tmp7_reg_712 <= grp_fu_533_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_266_p2 = ap_const_lv1_0))) then
                sum3_reg_616 <= sum3_fu_306_p2;
                sum5_reg_622 <= sum5_fu_319_p2;
                sum9_reg_627 <= sum9_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp8_reg_717 <= grp_fu_541_p3;
            end if;
        end if;
    end process;
    IN5_0_rec_cast1_reg_563(8 downto 6) <= "000";
    IN5_0_rec_cast2_reg_568(7 downto 6) <= "00";
    IN5_0_rec_cast17_cas_reg_573(6) <= '0';
    i_cast1_reg_591(4 downto 3) <= "00";
    i_cast_reg_597(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_266_p2, exitcond2_fu_246_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_246_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_266_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    IN5_0_rec_cast17_cas_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN5_0_rec_reg_186),7));
    IN5_0_rec_cast1_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN5_0_rec_reg_186),9));
    IN5_0_rec_cast2_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN5_0_rec_reg_186),8));
    IN5_0_rec_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN5_0_rec_reg_186),64));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_246_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_246_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_246_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_246_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_246_p2 <= "1" when (IN5_0_rec_reg_186 = ap_const_lv6_3B) else "0";
    exitcond_fu_266_p2 <= "1" when (i_reg_210 = ap_const_lv3_5) else "0";
    grp_fu_533_p0 <= grp_fu_533_p00(8 - 1 downto 0);
    grp_fu_533_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inptr_load_1_reg_667),16));
    grp_fu_541_p0 <= grp_fu_541_p00(8 - 1 downto 0);
    grp_fu_541_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inptr_load_2_reg_672),16));
    grp_fu_549_p0 <= grp_fu_549_p00(8 - 1 downto 0);
    grp_fu_549_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_221),16));
    i_1_fu_272_p2 <= std_logic_vector(unsigned(i_reg_210) + unsigned(ap_const_lv3_1));
    i_cast1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_210),5));
    i_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_210),4));
    icmp_fu_376_p2 <= "0" when (tmp_2_fu_366_p4 = ap_const_lv13_0) else "1";

    inptr_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, sum1_cast_fu_293_p1, sum3_cast_fu_386_p1, sum9_cast_fu_422_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inptr_address0 <= sum9_cast_fu_422_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inptr_address0 <= sum3_cast_fu_386_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inptr_address0 <= sum1_cast_fu_293_p1(11 - 1 downto 0);
        else 
            inptr_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    inptr_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sum5_cast_fu_390_p1, sum7_cast_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inptr_address1 <= sum7_cast_fu_417_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inptr_address1 <= sum5_cast_fu_390_p1(11 - 1 downto 0);
        else 
            inptr_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    inptr_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inptr_ce0 <= ap_const_logic_1;
        else 
            inptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inptr_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inptr_ce1 <= ap_const_logic_1;
        else 
            inptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mask_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_4_fu_278_p1, tmp_6_fu_399_p1, tmp_11_fu_441_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mask_address0 <= tmp_11_fu_441_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mask_address0 <= tmp_6_fu_399_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mask_address0 <= tmp_4_fu_278_p1(5 - 1 downto 0);
        else 
            mask_address0 <= "XXXXX";
        end if; 
    end process;


    mask_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_8_fu_409_p1, tmp_s_fu_431_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mask_address1 <= tmp_s_fu_431_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mask_address1 <= tmp_8_fu_409_p1(5 - 1 downto 0);
        else 
            mask_address1 <= "XXXXX";
        end if; 
    end process;


    mask_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mask_ce0 <= ap_const_logic_1;
        else 
            mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mask_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mask_ce1 <= ap_const_logic_1;
        else 
            mask_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    outptr_address0 <= outptr_addr_reg_578;

    outptr_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            outptr_ce0 <= ap_const_logic_1;
        else 
            outptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outptr_d0 <= 
        ap_const_lv8_FF when (icmp_reg_637(0) = '1') else 
        tmp_13_reg_642;

    outptr_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            outptr_we0 <= ap_const_logic_1;
        else 
            outptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_510_p2),21));

    p_rec_fu_252_p2 <= std_logic_vector(unsigned(IN5_0_rec_reg_186) + unsigned(ap_const_lv6_1));
    p_s_fu_358_p3 <= 
        ap_const_lv21_0 when (tmp_1_fu_350_p3(0) = '1') else 
        tmp_fu_346_p1;
    sum00_fu_454_p0 <= sum00_fu_454_p00(8 - 1 downto 0);
    sum00_fu_454_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_221),16));
    sum00_fu_454_p1 <= reg_225;
    sum00_fu_454_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum00_fu_454_p0) * signed(sum00_fu_454_p1))), 16));
    sum1_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_287_p2),64));
    sum1_fu_287_p2 <= std_logic_vector(unsigned(IN5_0_rec_reg_186) + unsigned(tmp_4_cast_fu_283_p1));
    sum33_fu_478_p0 <= sum33_fu_478_p00(8 - 1 downto 0);
    sum33_fu_478_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inptr_q1),16));
    sum33_fu_478_p1 <= mask_q1;
    sum33_fu_478_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum33_fu_478_p0) * signed(sum33_fu_478_p1))), 16));
    sum3_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_reg_616),64));
    sum3_fu_306_p2 <= std_logic_vector(unsigned(tmp1_fu_298_p3) + unsigned(IN5_0_rec_cast17_cas_reg_573));
    sum5_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_reg_622),64));
    sum5_fu_319_p2 <= std_logic_vector(unsigned(tmp2_fu_311_p3) + unsigned(IN5_0_rec_cast2_reg_568));
        sum7_cast1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum3_reg_616),8));

    sum7_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_cast1_fu_414_p1),64));
    sum9_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_reg_627),64));
    sum9_fu_332_p2 <= std_logic_vector(unsigned(tmp4_fu_324_p3) + unsigned(IN5_0_rec_cast1_reg_563));
    sum_1_fu_341_p2 <= std_logic_vector(shift_right(signed(sum_cast_fu_337_p1),to_integer(unsigned('0' & shift(31-1 downto 0)))));
    sum_2_fu_520_p2 <= std_logic_vector(signed(sum_reg_198) + signed(p_cast_fu_516_p1));
        sum_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_reg_198),32));

    tmp1_fu_298_p3 <= (ap_const_lv4_8 & i_reg_210);
    tmp2_fu_311_p3 <= (ap_const_lv5_10 & i_reg_210);
    tmp4_fu_324_p3 <= (ap_const_lv6_20 & i_reg_210);
        tmp7_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_reg_712),19));

        tmp8_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_717),19));

    tmp_10_fu_436_p2 <= std_logic_vector(unsigned(i_cast1_reg_591) + unsigned(ap_const_lv5_14));
    tmp_11_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_436_p2),64));
    tmp_12_fu_510_p2 <= std_logic_vector(signed(tmp8_cast_fu_507_p1) + signed(tmp7_cast_fu_504_p1));
    tmp_13_fu_382_p1 <= p_s_fu_358_p3(8 - 1 downto 0);
    tmp_1_fu_350_p3 <= sum_1_fu_341_p2(20 downto 20);
    tmp_2_fu_366_p4 <= p_s_fu_358_p3(20 downto 8);
    tmp_4_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_210),6));
    tmp_4_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_210),64));
    tmp_5_fu_394_p2 <= std_logic_vector(unsigned(i_cast_reg_597) + unsigned(ap_const_lv4_5));
    tmp_6_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_394_p2),64));
    tmp_7_fu_404_p2 <= std_logic_vector(unsigned(i_cast_reg_597) + unsigned(ap_const_lv4_A));
    tmp_8_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_404_p2),64));
    tmp_9_fu_426_p2 <= std_logic_vector(unsigned(i_cast1_reg_591) + unsigned(ap_const_lv5_F));
    tmp_fu_346_p1 <= sum_1_fu_341_p2(21 - 1 downto 0);
    tmp_s_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_426_p2),64));
end behav;
