// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _convolve_HH_
#define _convolve_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "img_conv_5x5.h"
#include "convolve_inptr.h"
#include "convolve_outptr.h"
#include "convolve_mask.h"

namespace ap_rtl {

struct convolve : public sc_module {
    // Port declarations 6
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    convolve(sc_module_name name);
    SC_HAS_PROCESS(convolve);

    ~convolve();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    convolve_inptr* inptr_U;
    convolve_outptr* outptr_U;
    convolve_mask* mask_U;
    img_conv_5x5* grp_img_conv_5x5_fu_42;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > z_1_fu_57_p2;
    sc_signal< sc_lv<5> > z_1_reg_66;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > inptr_q0;
    sc_signal< sc_lv<8> > inptr_q1;
    sc_signal< sc_lv<8> > mask_q0;
    sc_signal< sc_lv<8> > mask_q1;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_ap_start;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_ap_done;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_ap_idle;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_ap_ready;
    sc_signal< sc_lv<11> > grp_img_conv_5x5_fu_42_inptr_address0;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_inptr_ce0;
    sc_signal< sc_lv<11> > grp_img_conv_5x5_fu_42_inptr_address1;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_inptr_ce1;
    sc_signal< sc_lv<6> > grp_img_conv_5x5_fu_42_outptr_address0;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_outptr_ce0;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_outptr_we0;
    sc_signal< sc_lv<8> > grp_img_conv_5x5_fu_42_outptr_d0;
    sc_signal< sc_lv<5> > grp_img_conv_5x5_fu_42_mask_address0;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_mask_ce0;
    sc_signal< sc_lv<5> > grp_img_conv_5x5_fu_42_mask_address1;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_mask_ce1;
    sc_signal< sc_lv<5> > z_reg_30;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > grp_img_conv_5x5_fu_42_ap_start_reg;
    sc_signal< sc_lv<1> > exitcond1_fu_51_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_51_p2();
    void thread_grp_img_conv_5x5_fu_42_ap_start();
    void thread_z_1_fu_57_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
