-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of convolve is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7z030fbv484-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.000000,HLS_SYN_LAT=53845,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=3,HLS_SYN_FF=224,HLS_SYN_LUT=582,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal z_1_fu_57_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal z_1_reg_66 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal inptr_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inptr_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_img_conv_5x5_fu_42_ap_start : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_ap_done : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_ap_idle : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_ap_ready : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_inptr_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_img_conv_5x5_fu_42_inptr_ce0 : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_inptr_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_img_conv_5x5_fu_42_inptr_ce1 : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_outptr_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_img_conv_5x5_fu_42_outptr_ce0 : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_outptr_we0 : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_outptr_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_img_conv_5x5_fu_42_mask_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_img_conv_5x5_fu_42_mask_ce0 : STD_LOGIC;
    signal grp_img_conv_5x5_fu_42_mask_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_img_conv_5x5_fu_42_mask_ce1 : STD_LOGIC;
    signal z_reg_30 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_img_conv_5x5_fu_42_ap_start_reg : STD_LOGIC := '0';
    signal exitcond1_fu_51_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component img_conv_5x5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inptr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        inptr_ce0 : OUT STD_LOGIC;
        inptr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        inptr_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        inptr_ce1 : OUT STD_LOGIC;
        inptr_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        outptr_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        outptr_ce0 : OUT STD_LOGIC;
        outptr_we0 : OUT STD_LOGIC;
        outptr_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        mask_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        mask_ce0 : OUT STD_LOGIC;
        mask_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        mask_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        mask_ce1 : OUT STD_LOGIC;
        mask_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        y : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component convolve_inptr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolve_outptr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component convolve_mask IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    inptr_U : component convolve_inptr
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_img_conv_5x5_fu_42_inptr_address0,
        ce0 => grp_img_conv_5x5_fu_42_inptr_ce0,
        q0 => inptr_q0,
        address1 => grp_img_conv_5x5_fu_42_inptr_address1,
        ce1 => grp_img_conv_5x5_fu_42_inptr_ce1,
        q1 => inptr_q1);

    outptr_U : component convolve_outptr
    generic map (
        DataWidth => 8,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_img_conv_5x5_fu_42_outptr_address0,
        ce0 => grp_img_conv_5x5_fu_42_outptr_ce0,
        we0 => grp_img_conv_5x5_fu_42_outptr_we0,
        d0 => grp_img_conv_5x5_fu_42_outptr_d0);

    mask_U : component convolve_mask
    generic map (
        DataWidth => 8,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_img_conv_5x5_fu_42_mask_address0,
        ce0 => grp_img_conv_5x5_fu_42_mask_ce0,
        q0 => mask_q0,
        address1 => grp_img_conv_5x5_fu_42_mask_address1,
        ce1 => grp_img_conv_5x5_fu_42_mask_ce1,
        q1 => mask_q1);

    grp_img_conv_5x5_fu_42 : component img_conv_5x5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_img_conv_5x5_fu_42_ap_start,
        ap_done => grp_img_conv_5x5_fu_42_ap_done,
        ap_idle => grp_img_conv_5x5_fu_42_ap_idle,
        ap_ready => grp_img_conv_5x5_fu_42_ap_ready,
        inptr_address0 => grp_img_conv_5x5_fu_42_inptr_address0,
        inptr_ce0 => grp_img_conv_5x5_fu_42_inptr_ce0,
        inptr_q0 => inptr_q0,
        inptr_address1 => grp_img_conv_5x5_fu_42_inptr_address1,
        inptr_ce1 => grp_img_conv_5x5_fu_42_inptr_ce1,
        inptr_q1 => inptr_q1,
        outptr_address0 => grp_img_conv_5x5_fu_42_outptr_address0,
        outptr_ce0 => grp_img_conv_5x5_fu_42_outptr_ce0,
        outptr_we0 => grp_img_conv_5x5_fu_42_outptr_we0,
        outptr_d0 => grp_img_conv_5x5_fu_42_outptr_d0,
        mask_address0 => grp_img_conv_5x5_fu_42_mask_address0,
        mask_ce0 => grp_img_conv_5x5_fu_42_mask_ce0,
        mask_q0 => mask_q0,
        mask_address1 => grp_img_conv_5x5_fu_42_mask_address1,
        mask_ce1 => grp_img_conv_5x5_fu_42_mask_ce1,
        mask_q1 => mask_q1,
        y => z_reg_30);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_img_conv_5x5_fu_42_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_img_conv_5x5_fu_42_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond1_fu_51_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_img_conv_5x5_fu_42_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_img_conv_5x5_fu_42_ap_ready = ap_const_logic_1)) then 
                    grp_img_conv_5x5_fu_42_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    z_reg_30_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_img_conv_5x5_fu_42_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                z_reg_30 <= z_1_reg_66;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                z_reg_30 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                z_1_reg_66 <= z_1_fu_57_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_img_conv_5x5_fu_42_ap_done, ap_CS_fsm_state3, exitcond1_fu_51_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_51_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_img_conv_5x5_fu_42_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_51_p2)
    begin
        if (((exitcond1_fu_51_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_51_p2)
    begin
        if (((exitcond1_fu_51_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_51_p2 <= "1" when (z_reg_30 = ap_const_lv5_1C) else "0";
    grp_img_conv_5x5_fu_42_ap_start <= grp_img_conv_5x5_fu_42_ap_start_reg;
    z_1_fu_57_p2 <= std_logic_vector(unsigned(z_reg_30) + unsigned(ap_const_lv5_1));
end behav;
