// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7z030fbv484-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.000000,HLS_SYN_LAT=53845,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=3,HLS_SYN_FF=224,HLS_SYN_LUT=582,HLS_VERSION=2018_3}" *)

module convolve (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] z_1_fu_57_p2;
reg   [4:0] z_1_reg_66;
wire    ap_CS_fsm_state2;
wire   [7:0] inptr_q0;
wire   [7:0] inptr_q1;
wire   [7:0] mask_q0;
wire   [7:0] mask_q1;
wire    grp_img_conv_5x5_fu_42_ap_start;
wire    grp_img_conv_5x5_fu_42_ap_done;
wire    grp_img_conv_5x5_fu_42_ap_idle;
wire    grp_img_conv_5x5_fu_42_ap_ready;
wire   [10:0] grp_img_conv_5x5_fu_42_inptr_address0;
wire    grp_img_conv_5x5_fu_42_inptr_ce0;
wire   [10:0] grp_img_conv_5x5_fu_42_inptr_address1;
wire    grp_img_conv_5x5_fu_42_inptr_ce1;
wire   [5:0] grp_img_conv_5x5_fu_42_outptr_address0;
wire    grp_img_conv_5x5_fu_42_outptr_ce0;
wire    grp_img_conv_5x5_fu_42_outptr_we0;
wire   [7:0] grp_img_conv_5x5_fu_42_outptr_d0;
wire   [4:0] grp_img_conv_5x5_fu_42_mask_address0;
wire    grp_img_conv_5x5_fu_42_mask_ce0;
wire   [4:0] grp_img_conv_5x5_fu_42_mask_address1;
wire    grp_img_conv_5x5_fu_42_mask_ce1;
reg   [4:0] z_reg_30;
wire    ap_CS_fsm_state3;
reg    grp_img_conv_5x5_fu_42_ap_start_reg;
wire   [0:0] exitcond1_fu_51_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_img_conv_5x5_fu_42_ap_start_reg = 1'b0;
end

convolve_inptr #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
inptr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_img_conv_5x5_fu_42_inptr_address0),
    .ce0(grp_img_conv_5x5_fu_42_inptr_ce0),
    .q0(inptr_q0),
    .address1(grp_img_conv_5x5_fu_42_inptr_address1),
    .ce1(grp_img_conv_5x5_fu_42_inptr_ce1),
    .q1(inptr_q1)
);

convolve_outptr #(
    .DataWidth( 8 ),
    .AddressRange( 60 ),
    .AddressWidth( 6 ))
outptr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_img_conv_5x5_fu_42_outptr_address0),
    .ce0(grp_img_conv_5x5_fu_42_outptr_ce0),
    .we0(grp_img_conv_5x5_fu_42_outptr_we0),
    .d0(grp_img_conv_5x5_fu_42_outptr_d0)
);

convolve_mask #(
    .DataWidth( 8 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
mask_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_img_conv_5x5_fu_42_mask_address0),
    .ce0(grp_img_conv_5x5_fu_42_mask_ce0),
    .q0(mask_q0),
    .address1(grp_img_conv_5x5_fu_42_mask_address1),
    .ce1(grp_img_conv_5x5_fu_42_mask_ce1),
    .q1(mask_q1)
);

img_conv_5x5 grp_img_conv_5x5_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_img_conv_5x5_fu_42_ap_start),
    .ap_done(grp_img_conv_5x5_fu_42_ap_done),
    .ap_idle(grp_img_conv_5x5_fu_42_ap_idle),
    .ap_ready(grp_img_conv_5x5_fu_42_ap_ready),
    .inptr_address0(grp_img_conv_5x5_fu_42_inptr_address0),
    .inptr_ce0(grp_img_conv_5x5_fu_42_inptr_ce0),
    .inptr_q0(inptr_q0),
    .inptr_address1(grp_img_conv_5x5_fu_42_inptr_address1),
    .inptr_ce1(grp_img_conv_5x5_fu_42_inptr_ce1),
    .inptr_q1(inptr_q1),
    .outptr_address0(grp_img_conv_5x5_fu_42_outptr_address0),
    .outptr_ce0(grp_img_conv_5x5_fu_42_outptr_ce0),
    .outptr_we0(grp_img_conv_5x5_fu_42_outptr_we0),
    .outptr_d0(grp_img_conv_5x5_fu_42_outptr_d0),
    .mask_address0(grp_img_conv_5x5_fu_42_mask_address0),
    .mask_ce0(grp_img_conv_5x5_fu_42_mask_ce0),
    .mask_q0(mask_q0),
    .mask_address1(grp_img_conv_5x5_fu_42_mask_address1),
    .mask_ce1(grp_img_conv_5x5_fu_42_mask_ce1),
    .mask_q1(mask_q1),
    .y(z_reg_30)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_img_conv_5x5_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_fu_51_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_img_conv_5x5_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_img_conv_5x5_fu_42_ap_ready == 1'b1)) begin
            grp_img_conv_5x5_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_img_conv_5x5_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        z_reg_30 <= z_1_reg_66;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        z_reg_30 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        z_1_reg_66 <= z_1_fu_57_p2;
    end
end

always @ (*) begin
    if (((exitcond1_fu_51_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_51_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_51_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_img_conv_5x5_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign exitcond1_fu_51_p2 = ((z_reg_30 == 5'd28) ? 1'b1 : 1'b0);

assign grp_img_conv_5x5_fu_42_ap_start = grp_img_conv_5x5_fu_42_ap_start_reg;

assign z_1_fu_57_p2 = (z_reg_30 + 5'd1);

endmodule //convolve
