-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_conv_5x5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inptr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inptr_ce0 : OUT STD_LOGIC;
    inptr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    inptr_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inptr_ce1 : OUT STD_LOGIC;
    inptr_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    outptr_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    outptr_ce0 : OUT STD_LOGIC;
    outptr_we0 : OUT STD_LOGIC;
    outptr_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mask_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    mask_ce0 : OUT STD_LOGIC;
    mask_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mask_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    mask_ce1 : OUT STD_LOGIC;
    mask_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    y : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of img_conv_5x5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN4_0_rec_cast1_fu_228_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal IN4_0_rec_cast1_reg_581 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal outptr_addr_reg_586 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_rec_fu_243_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_rec_reg_594 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast1_fu_249_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast1_reg_599 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_cast_fu_253_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_605 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_263_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_614 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_338_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_reg_629 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_345_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_635 : STD_LOGIC_VECTOR (6 downto 0);
    signal inptr_load_1_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal inptr_load_2_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_load_1_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_load_2_reg_685 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum33_fu_502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum33_reg_700 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_550_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp9_reg_705 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_558_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp5_reg_710 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_1_fu_544_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal IN4_0_rec_reg_184 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_reg_196 : STD_LOGIC_VECTOR (20 downto 0);
    signal exitcond2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_208 : STD_LOGIC_VECTOR (2 downto 0);
    signal IN4_0_rec_cast_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_274_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum1_fu_283_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_301_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_fu_309_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_cast_fu_353_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum3_fu_357_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_cast_fu_376_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum5_fu_380_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_391_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_401_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp9_cast1_fu_411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_cast_fu_414_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum7_fu_418_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_fu_428_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_cast_fu_436_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum9_fu_440_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_450_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum00_fu_478_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum00_fu_478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum00_fu_478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum33_fu_502_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum33_fu_502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_566_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp13_cast_fu_531_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp12_cast_fu_528_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_13_fu_534_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast_fu_540_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_550_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_566_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_550_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_558_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_566_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum00_fu_478_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum33_fu_502_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component convolve_mac_mulabkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component convolve_mac_mulacud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    convolve_mac_mulabkb_U1 : component convolve_mac_mulabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_550_p0,
        din1 => mask_load_1_reg_680,
        din2 => sum00_fu_478_p2,
        dout => grp_fu_550_p3);

    convolve_mac_mulacud_U2 : component convolve_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_558_p0,
        din1 => mask_load_2_reg_685,
        din2 => grp_fu_566_p3,
        dout => grp_fu_558_p3);

    convolve_mac_mulabkb_U3 : component convolve_mac_mulabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_566_p0,
        din1 => reg_224,
        din2 => sum33_reg_700,
        dout => grp_fu_566_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    IN4_0_rec_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                IN4_0_rec_reg_184 <= p_rec_reg_594;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                IN4_0_rec_reg_184 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_208 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_208 <= i_1_reg_614;
            end if; 
        end if;
    end process;

    sum_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_reg_196 <= ap_const_lv21_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sum_reg_196 <= sum_1_fu_544_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    IN4_0_rec_cast1_reg_581(5 downto 0) <= IN4_0_rec_cast1_fu_228_p1(5 downto 0);
                outptr_addr_reg_586 <= IN4_0_rec_cast_fu_232_p1(6 - 1 downto 0);
                p_rec_reg_594 <= p_rec_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_614 <= i_1_fu_263_p2;
                    i_cast1_reg_599(2 downto 0) <= i_cast1_fu_249_p1(2 downto 0);
                    i_cast_reg_605(2 downto 0) <= i_cast_fu_253_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                inptr_load_1_reg_660 <= inptr_q0;
                inptr_load_2_reg_665 <= inptr_q1;
                mask_load_1_reg_680 <= mask_q0;
                mask_load_2_reg_685 <= mask_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_220 <= inptr_q0;
                reg_224 <= mask_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sum33_reg_700 <= sum33_fu_502_p2;
                tmp9_reg_705 <= grp_fu_550_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp4_reg_629 <= tmp4_fu_338_p3;
                    tmp_reg_635(2 downto 0) <= tmp_fu_345_p3(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp5_reg_710 <= grp_fu_558_p3;
            end if;
        end if;
    end process;
    IN4_0_rec_cast1_reg_581(10 downto 6) <= "00000";
    i_cast1_reg_599(4 downto 3) <= "00";
    i_cast_reg_605(3) <= '0';
    tmp_reg_635(6 downto 3) <= "1000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_257_p2, exitcond2_fu_237_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_237_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    IN4_0_rec_cast1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN4_0_rec_reg_184),11));
    IN4_0_rec_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN4_0_rec_reg_184),64));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_237_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_237_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_237_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_237_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_237_p2 <= "1" when (IN4_0_rec_reg_184 = ap_const_lv6_3C) else "0";
    exitcond_fu_257_p2 <= "1" when (i_reg_208 = ap_const_lv3_5) else "0";
    grp_fu_550_p0 <= grp_fu_550_p00(8 - 1 downto 0);
    grp_fu_550_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inptr_load_1_reg_660),16));
    grp_fu_558_p0 <= grp_fu_558_p00(8 - 1 downto 0);
    grp_fu_558_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inptr_load_2_reg_665),16));
    grp_fu_566_p0 <= grp_fu_566_p00(8 - 1 downto 0);
    grp_fu_566_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_220),16));
    i_1_fu_263_p2 <= std_logic_vector(unsigned(i_reg_208) + unsigned(ap_const_lv3_1));
    i_cast1_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_208),5));
    i_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_208),4));
    icmp_fu_319_p2 <= "0" when (tmp_3_fu_309_p4 = ap_const_lv13_0) else "1";

    inptr_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, sum1_cast_fu_288_p1, sum3_cast_fu_363_p1, sum9_cast_fu_445_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inptr_address0 <= sum9_cast_fu_445_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inptr_address0 <= sum3_cast_fu_363_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inptr_address0 <= sum1_cast_fu_288_p1(11 - 1 downto 0);
        else 
            inptr_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    inptr_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sum5_cast_fu_386_p1, sum7_cast_fu_423_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inptr_address1 <= sum7_cast_fu_423_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inptr_address1 <= sum5_cast_fu_386_p1(11 - 1 downto 0);
        else 
            inptr_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    inptr_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inptr_ce0 <= ap_const_logic_1;
        else 
            inptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inptr_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inptr_ce1 <= ap_const_logic_1;
        else 
            inptr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mask_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_6_fu_269_p1, tmp_8_fu_396_p1, tmp_12_fu_465_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mask_address0 <= tmp_12_fu_465_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mask_address0 <= tmp_8_fu_396_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mask_address0 <= tmp_6_fu_269_p1(5 - 1 downto 0);
        else 
            mask_address0 <= "XXXXX";
        end if; 
    end process;


    mask_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_s_fu_406_p1, tmp_10_fu_455_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mask_address1 <= tmp_10_fu_455_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mask_address1 <= tmp_s_fu_406_p1(5 - 1 downto 0);
        else 
            mask_address1 <= "XXXXX";
        end if; 
    end process;


    mask_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mask_ce0 <= ap_const_logic_1;
        else 
            mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mask_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mask_ce1 <= ap_const_logic_1;
        else 
            mask_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    outptr_address0 <= outptr_addr_reg_586;

    outptr_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outptr_ce0 <= ap_const_logic_1;
        else 
            outptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outptr_d0 <= 
        ap_const_lv8_FF when (icmp_fu_319_p2(0) = '1') else 
        tmp_4_fu_325_p1;

    outptr_we0_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_257_p2)
    begin
        if (((exitcond_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outptr_we0 <= ap_const_logic_1;
        else 
            outptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_534_p2),21));

    p_rec_fu_243_p2 <= std_logic_vector(unsigned(IN4_0_rec_reg_184) + unsigned(ap_const_lv6_1));
    p_s_fu_301_p3 <= 
        ap_const_lv21_0 when (tmp_2_fu_293_p3(0) = '1') else 
        sum_reg_196;
    sum00_fu_478_p0 <= sum00_fu_478_p00(8 - 1 downto 0);
    sum00_fu_478_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_220),16));
    sum00_fu_478_p1 <= reg_224;
    sum00_fu_478_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum00_fu_478_p0) * signed(sum00_fu_478_p1))), 16));
    sum1_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_283_p2),64));
    sum1_fu_283_p2 <= std_logic_vector(unsigned(tmp3_fu_274_p4) + unsigned(IN4_0_rec_cast1_reg_581));
    sum33_fu_502_p0 <= sum33_fu_502_p00(8 - 1 downto 0);
    sum33_fu_502_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inptr_q1),16));
    sum33_fu_502_p1 <= mask_q1;
    sum33_fu_502_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum33_fu_502_p0) * signed(sum33_fu_502_p1))), 16));
    sum3_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_357_p2),64));
    sum3_fu_357_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_353_p1) + unsigned(tmp4_fu_338_p3));
    sum5_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_380_p2),64));
    sum5_fu_380_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_376_p1) + unsigned(tmp4_fu_338_p3));
    sum7_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_418_p2),64));
    sum7_fu_418_p2 <= std_logic_vector(unsigned(tmp9_cast_fu_414_p1) + unsigned(tmp4_reg_629));
    sum9_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_440_p2),64));
    sum9_fu_440_p2 <= std_logic_vector(unsigned(tmp11_cast_fu_436_p1) + unsigned(tmp4_reg_629));
    sum_1_fu_544_p2 <= std_logic_vector(unsigned(sum_reg_196) + unsigned(p_cast_fu_540_p1));
    tmp11_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_428_p3),11));
        tmp12_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_reg_705),19));

        tmp13_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_reg_710),19));

    tmp1_fu_368_p3 <= (ap_const_lv5_10 & i_reg_208);
    tmp3_fu_274_p4 <= ((y & ap_const_lv3_0) & i_reg_208);
    tmp4_fu_338_p3 <= (y & IN4_0_rec_reg_184);
    tmp5_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_345_p3),11));
    tmp7_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_368_p3),11));
    tmp7_fu_428_p3 <= (ap_const_lv6_20 & i_reg_208);
        tmp9_cast1_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_635),8));

    tmp9_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_cast1_fu_411_p1),11));
    tmp_10_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_450_p2),64));
    tmp_11_fu_460_p2 <= std_logic_vector(unsigned(i_cast1_reg_599) + unsigned(ap_const_lv5_14));
    tmp_12_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_460_p2),64));
    tmp_13_fu_534_p2 <= std_logic_vector(signed(tmp13_cast_fu_531_p1) + signed(tmp12_cast_fu_528_p1));
    tmp_1_fu_450_p2 <= std_logic_vector(unsigned(i_cast1_reg_599) + unsigned(ap_const_lv5_F));
    tmp_2_fu_293_p3 <= sum_reg_196(20 downto 20);
    tmp_3_fu_309_p4 <= p_s_fu_301_p3(20 downto 8);
    tmp_4_fu_325_p1 <= p_s_fu_301_p3(8 - 1 downto 0);
    tmp_6_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_208),64));
    tmp_7_fu_391_p2 <= std_logic_vector(unsigned(i_cast_reg_605) + unsigned(ap_const_lv4_5));
    tmp_8_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_391_p2),64));
    tmp_9_fu_401_p2 <= std_logic_vector(unsigned(i_cast_reg_605) + unsigned(ap_const_lv4_A));
    tmp_fu_345_p3 <= (ap_const_lv4_8 & i_reg_208);
    tmp_s_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_401_p2),64));
end behav;
