// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="img_conv_5x5,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7z030fbv484-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.000000,HLS_SYN_LAT=1948,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=210,HLS_SYN_LUT=589,HLS_VERSION=2018_3}" *)

module img_conv_5x5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inptr_address0,
        inptr_ce0,
        inptr_q0,
        inptr_address1,
        inptr_ce1,
        inptr_q1,
        outptr_address0,
        outptr_ce0,
        outptr_we0,
        outptr_d0,
        mask_address0,
        mask_ce0,
        mask_q0,
        mask_address1,
        mask_ce1,
        mask_q1,
        shift
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] inptr_address0;
output   inptr_ce0;
input  [7:0] inptr_q0;
output  [10:0] inptr_address1;
output   inptr_ce1;
input  [7:0] inptr_q1;
output  [5:0] outptr_address0;
output   outptr_ce0;
output   outptr_we0;
output  [7:0] outptr_d0;
output  [4:0] mask_address0;
output   mask_ce0;
input  [7:0] mask_q0;
output  [4:0] mask_address1;
output   mask_ce1;
input  [7:0] mask_q1;
input  [31:0] shift;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] inptr_address0;
reg inptr_ce0;
reg[10:0] inptr_address1;
reg inptr_ce1;
reg outptr_ce0;
reg outptr_we0;
reg[4:0] mask_address0;
reg mask_ce0;
reg[4:0] mask_address1;
reg mask_ce1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_221;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg  signed [7:0] reg_225;
wire   [8:0] IN5_0_rec_cast1_fu_229_p1;
reg   [8:0] IN5_0_rec_cast1_reg_563;
wire    ap_CS_fsm_state2;
wire   [7:0] IN5_0_rec_cast2_fu_233_p1;
reg   [7:0] IN5_0_rec_cast2_reg_568;
wire   [6:0] IN5_0_rec_cast17_cas_fu_237_p1;
reg   [6:0] IN5_0_rec_cast17_cas_reg_573;
reg   [5:0] outptr_addr_reg_578;
wire   [5:0] p_rec_fu_252_p2;
reg   [5:0] p_rec_reg_586;
wire   [4:0] i_cast1_fu_258_p1;
reg   [4:0] i_cast1_reg_591;
wire    ap_CS_fsm_state3;
wire   [3:0] i_cast_fu_262_p1;
reg   [3:0] i_cast_reg_597;
wire   [2:0] i_1_fu_272_p2;
reg   [2:0] i_1_reg_606;
wire   [0:0] exitcond_fu_266_p2;
wire  signed [6:0] sum3_fu_306_p2;
reg  signed [6:0] sum3_reg_616;
wire   [7:0] sum5_fu_319_p2;
reg   [7:0] sum5_reg_622;
wire   [8:0] sum9_fu_332_p2;
reg   [8:0] sum9_reg_627;
wire   [0:0] icmp_fu_376_p2;
reg   [0:0] icmp_reg_637;
wire   [7:0] tmp_13_fu_382_p1;
reg   [7:0] tmp_13_reg_642;
reg   [7:0] inptr_load_1_reg_667;
wire    ap_CS_fsm_state5;
reg   [7:0] inptr_load_2_reg_672;
reg  signed [7:0] mask_load_1_reg_687;
reg  signed [7:0] mask_load_2_reg_692;
wire   [15:0] sum33_fu_478_p2;
reg  signed [15:0] sum33_reg_707;
wire  signed [16:0] grp_fu_533_p3;
reg  signed [16:0] tmp7_reg_712;
wire  signed [17:0] grp_fu_541_p3;
reg  signed [17:0] tmp8_reg_717;
wire    ap_CS_fsm_state7;
wire   [20:0] sum_2_fu_520_p2;
wire    ap_CS_fsm_state8;
reg   [5:0] IN5_0_rec_reg_186;
wire    ap_CS_fsm_state9;
reg  signed [20:0] sum_reg_198;
wire   [0:0] exitcond2_fu_246_p2;
reg   [2:0] i_reg_210;
wire   [63:0] IN5_0_rec_cast_fu_241_p1;
wire   [63:0] sum1_cast_fu_293_p1;
wire   [63:0] tmp_4_fu_278_p1;
wire   [63:0] sum3_cast_fu_386_p1;
wire   [63:0] sum5_cast_fu_390_p1;
wire   [63:0] tmp_6_fu_399_p1;
wire   [63:0] tmp_8_fu_409_p1;
wire   [63:0] sum7_cast_fu_417_p1;
wire   [63:0] sum9_cast_fu_422_p1;
wire   [63:0] tmp_s_fu_431_p1;
wire   [63:0] tmp_11_fu_441_p1;
wire   [5:0] tmp_4_cast_fu_283_p1;
wire   [5:0] sum1_fu_287_p2;
wire   [6:0] tmp1_fu_298_p3;
wire   [7:0] tmp2_fu_311_p3;
wire   [8:0] tmp4_fu_324_p3;
wire  signed [31:0] sum_cast_fu_337_p1;
wire   [31:0] sum_1_fu_341_p2;
wire   [0:0] tmp_1_fu_350_p3;
wire   [20:0] tmp_fu_346_p1;
wire   [20:0] p_s_fu_358_p3;
wire   [12:0] tmp_2_fu_366_p4;
wire   [3:0] tmp_5_fu_394_p2;
wire   [3:0] tmp_7_fu_404_p2;
wire  signed [7:0] sum7_cast1_fu_414_p1;
wire   [4:0] tmp_9_fu_426_p2;
wire   [4:0] tmp_10_fu_436_p2;
wire   [7:0] sum00_fu_454_p0;
wire  signed [7:0] sum00_fu_454_p1;
wire  signed [15:0] sum00_fu_454_p2;
wire   [7:0] sum33_fu_478_p0;
wire  signed [7:0] sum33_fu_478_p1;
wire  signed [16:0] grp_fu_549_p3;
wire  signed [18:0] tmp8_cast_fu_507_p1;
wire  signed [18:0] tmp7_cast_fu_504_p1;
wire   [18:0] tmp_12_fu_510_p2;
wire  signed [20:0] p_cast_fu_516_p1;
wire   [7:0] grp_fu_533_p0;
wire   [7:0] grp_fu_541_p0;
wire   [7:0] grp_fu_549_p0;
reg   [8:0] ap_NS_fsm;
wire   [15:0] grp_fu_533_p00;
wire   [15:0] grp_fu_541_p00;
wire   [15:0] grp_fu_549_p00;
wire   [15:0] sum00_fu_454_p00;
wire   [15:0] sum33_fu_478_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

img_conv_5x5_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
img_conv_5x5_mac_bkb_U1(
    .din0(grp_fu_533_p0),
    .din1(mask_load_1_reg_687),
    .din2(sum00_fu_454_p2),
    .dout(grp_fu_533_p3)
);

img_conv_5x5_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
img_conv_5x5_mac_cud_U2(
    .din0(grp_fu_541_p0),
    .din1(mask_load_2_reg_692),
    .din2(grp_fu_549_p3),
    .dout(grp_fu_541_p3)
);

img_conv_5x5_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
img_conv_5x5_mac_bkb_U3(
    .din0(grp_fu_549_p0),
    .din1(reg_225),
    .din2(sum33_reg_707),
    .dout(grp_fu_549_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        IN5_0_rec_reg_186 <= p_rec_reg_586;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        IN5_0_rec_reg_186 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_246_p2 == 1'd0))) begin
        i_reg_210 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_210 <= i_1_reg_606;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_246_p2 == 1'd0))) begin
        sum_reg_198 <= 21'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_reg_198 <= sum_2_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IN5_0_rec_cast17_cas_reg_573[5 : 0] <= IN5_0_rec_cast17_cas_fu_237_p1[5 : 0];
        IN5_0_rec_cast1_reg_563[5 : 0] <= IN5_0_rec_cast1_fu_229_p1[5 : 0];
        IN5_0_rec_cast2_reg_568[5 : 0] <= IN5_0_rec_cast2_fu_233_p1[5 : 0];
        outptr_addr_reg_578 <= IN5_0_rec_cast_fu_241_p1;
        p_rec_reg_586 <= p_rec_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_606 <= i_1_fu_272_p2;
        i_cast1_reg_591[2 : 0] <= i_cast1_fu_258_p1[2 : 0];
        i_cast_reg_597[2 : 0] <= i_cast_fu_262_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_266_p2 == 1'd1))) begin
        icmp_reg_637 <= icmp_fu_376_p2;
        tmp_13_reg_642 <= tmp_13_fu_382_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        inptr_load_1_reg_667 <= inptr_q0;
        inptr_load_2_reg_672 <= inptr_q1;
        mask_load_1_reg_687 <= mask_q0;
        mask_load_2_reg_692 <= mask_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_221 <= inptr_q0;
        reg_225 <= mask_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum33_reg_707 <= sum33_fu_478_p2;
        tmp7_reg_712 <= grp_fu_533_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_266_p2 == 1'd0))) begin
        sum3_reg_616 <= sum3_fu_306_p2;
        sum5_reg_622 <= sum5_fu_319_p2;
        sum9_reg_627 <= sum9_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp8_reg_717 <= grp_fu_541_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_246_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_246_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        inptr_address0 = sum9_cast_fu_422_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inptr_address0 = sum3_cast_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inptr_address0 = sum1_cast_fu_293_p1;
    end else begin
        inptr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        inptr_address1 = sum7_cast_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inptr_address1 = sum5_cast_fu_390_p1;
    end else begin
        inptr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        inptr_ce0 = 1'b1;
    end else begin
        inptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        inptr_ce1 = 1'b1;
    end else begin
        inptr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mask_address0 = tmp_11_fu_441_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mask_address0 = tmp_6_fu_399_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mask_address0 = tmp_4_fu_278_p1;
    end else begin
        mask_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mask_address1 = tmp_s_fu_431_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mask_address1 = tmp_8_fu_409_p1;
    end else begin
        mask_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        mask_ce0 = 1'b1;
    end else begin
        mask_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        mask_ce1 = 1'b1;
    end else begin
        mask_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        outptr_ce0 = 1'b1;
    end else begin
        outptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        outptr_we0 = 1'b1;
    end else begin
        outptr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_246_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_266_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN5_0_rec_cast17_cas_fu_237_p1 = IN5_0_rec_reg_186;

assign IN5_0_rec_cast1_fu_229_p1 = IN5_0_rec_reg_186;

assign IN5_0_rec_cast2_fu_233_p1 = IN5_0_rec_reg_186;

assign IN5_0_rec_cast_fu_241_p1 = IN5_0_rec_reg_186;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond2_fu_246_p2 = ((IN5_0_rec_reg_186 == 6'd59) ? 1'b1 : 1'b0);

assign exitcond_fu_266_p2 = ((i_reg_210 == 3'd5) ? 1'b1 : 1'b0);

assign grp_fu_533_p0 = grp_fu_533_p00;

assign grp_fu_533_p00 = inptr_load_1_reg_667;

assign grp_fu_541_p0 = grp_fu_541_p00;

assign grp_fu_541_p00 = inptr_load_2_reg_672;

assign grp_fu_549_p0 = grp_fu_549_p00;

assign grp_fu_549_p00 = reg_221;

assign i_1_fu_272_p2 = (i_reg_210 + 3'd1);

assign i_cast1_fu_258_p1 = i_reg_210;

assign i_cast_fu_262_p1 = i_reg_210;

assign icmp_fu_376_p2 = ((tmp_2_fu_366_p4 != 13'd0) ? 1'b1 : 1'b0);

assign outptr_address0 = outptr_addr_reg_578;

assign outptr_d0 = ((icmp_reg_637[0:0] === 1'b1) ? 8'd255 : tmp_13_reg_642);

assign p_cast_fu_516_p1 = $signed(tmp_12_fu_510_p2);

assign p_rec_fu_252_p2 = (IN5_0_rec_reg_186 + 6'd1);

assign p_s_fu_358_p3 = ((tmp_1_fu_350_p3[0:0] === 1'b1) ? 21'd0 : tmp_fu_346_p1);

assign sum00_fu_454_p0 = sum00_fu_454_p00;

assign sum00_fu_454_p00 = reg_221;

assign sum00_fu_454_p1 = reg_225;

assign sum00_fu_454_p2 = ($signed({{1'b0}, {sum00_fu_454_p0}}) * $signed(sum00_fu_454_p1));

assign sum1_cast_fu_293_p1 = sum1_fu_287_p2;

assign sum1_fu_287_p2 = (IN5_0_rec_reg_186 + tmp_4_cast_fu_283_p1);

assign sum33_fu_478_p0 = sum33_fu_478_p00;

assign sum33_fu_478_p00 = inptr_q1;

assign sum33_fu_478_p1 = mask_q1;

assign sum33_fu_478_p2 = ($signed({{1'b0}, {sum33_fu_478_p0}}) * $signed(sum33_fu_478_p1));

assign sum3_cast_fu_386_p1 = $unsigned(sum3_reg_616);

assign sum3_fu_306_p2 = (tmp1_fu_298_p3 + IN5_0_rec_cast17_cas_reg_573);

assign sum5_cast_fu_390_p1 = sum5_reg_622;

assign sum5_fu_319_p2 = (tmp2_fu_311_p3 + IN5_0_rec_cast2_reg_568);

assign sum7_cast1_fu_414_p1 = sum3_reg_616;

assign sum7_cast_fu_417_p1 = $unsigned(sum7_cast1_fu_414_p1);

assign sum9_cast_fu_422_p1 = sum9_reg_627;

assign sum9_fu_332_p2 = (tmp4_fu_324_p3 + IN5_0_rec_cast1_reg_563);

assign sum_1_fu_341_p2 = $signed(sum_cast_fu_337_p1) >>> shift;

assign sum_2_fu_520_p2 = ($signed(sum_reg_198) + $signed(p_cast_fu_516_p1));

assign sum_cast_fu_337_p1 = sum_reg_198;

assign tmp1_fu_298_p3 = {{4'd8}, {i_reg_210}};

assign tmp2_fu_311_p3 = {{5'd16}, {i_reg_210}};

assign tmp4_fu_324_p3 = {{6'd32}, {i_reg_210}};

assign tmp7_cast_fu_504_p1 = tmp7_reg_712;

assign tmp8_cast_fu_507_p1 = tmp8_reg_717;

assign tmp_10_fu_436_p2 = ($signed(i_cast1_reg_591) + $signed(5'd20));

assign tmp_11_fu_441_p1 = tmp_10_fu_436_p2;

assign tmp_12_fu_510_p2 = ($signed(tmp8_cast_fu_507_p1) + $signed(tmp7_cast_fu_504_p1));

assign tmp_13_fu_382_p1 = p_s_fu_358_p3[7:0];

assign tmp_1_fu_350_p3 = sum_1_fu_341_p2[32'd20];

assign tmp_2_fu_366_p4 = {{p_s_fu_358_p3[20:8]}};

assign tmp_4_cast_fu_283_p1 = i_reg_210;

assign tmp_4_fu_278_p1 = i_reg_210;

assign tmp_5_fu_394_p2 = (i_cast_reg_597 + 4'd5);

assign tmp_6_fu_399_p1 = tmp_5_fu_394_p2;

assign tmp_7_fu_404_p2 = ($signed(i_cast_reg_597) + $signed(4'd10));

assign tmp_8_fu_409_p1 = tmp_7_fu_404_p2;

assign tmp_9_fu_426_p2 = (i_cast1_reg_591 + 5'd15);

assign tmp_fu_346_p1 = sum_1_fu_341_p2[20:0];

assign tmp_s_fu_431_p1 = tmp_9_fu_426_p2;

always @ (posedge ap_clk) begin
    IN5_0_rec_cast1_reg_563[8:6] <= 3'b000;
    IN5_0_rec_cast2_reg_568[7:6] <= 2'b00;
    IN5_0_rec_cast17_cas_reg_573[6] <= 1'b0;
    i_cast1_reg_591[4:3] <= 2'b00;
    i_cast_reg_597[3] <= 1'b0;
end

endmodule //img_conv_5x5
